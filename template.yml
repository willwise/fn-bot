# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  fn-bot

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

#Parameters:
#  OSAPIKEY:
#    Description: 'ordinance survey api key'
#    Type: 'AWS::SSM::Parameter::Value<String>'
#    Default: 'mGvGWUtOi5aRYpACv6PyiofCOPkNOhPG'

Parameters:
  Workload:
    Type: String
    Default: "dev"
    Description: "The type of workload (environment) that this stack will run"
  OsApiKey:
    Type: String
    Default: "mGvGWUtOi5aRYpACv6PyiofCOPkNOhPG"
    Description: "The key for the ordinance survey API"
    NoEcho: true
  NbcCrmApiKey:
    Type: String
    Description: "The api key for NBCs CRM"
    NoEcho: true
  NbcCrmApiEndpoint:
    Type: String
    Description: "The api endpoint for NBCs CRM"
    NoEcho: true

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  speakToCouncilFunction:
    Type: AWS::Serverless::Function
    Properties:
      ##Handler: src/handlers/hello-from-lambda.helloFromLambdaHandler
      Handler: src/speakToCouncil/speak-to-council.speakToCouncil
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBReadOnlyAccess
      Environment:
        Variables:
          OS_API_KEY: !Sub
          - '${OsApiKey}'
          - OsApiKey: !Ref OsApiKey
          TABLE_NAME:
            Ref: fnBotServicesTable

  fnBotServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ServiceName
          AttributeType: S
      KeySchema:
        - AttributeName: ServiceName
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  bulkServiceUpload:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/bulkServiceUpload/bulk-upload.bulkUpload
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonS3ReadOnlyAccess
      Environment:
        Variables:
          TABLE_NAME:
            Ref: fnBotServicesTable
          BUCKET:
            Ref: fnBotServicesBucket

  fnBotServicesBucket:
    Type: AWS::S3::Bucket

  fnBotUpdateSlots:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: rebuildBot.rebuildBot
      Runtime: nodejs12.x
      CodeUri: ./src/rebuldBot
      Description: An Amazon DynamoDB trigger that logs the updates made to a table.
      MemorySize: 128
      Timeout: 23
      Policies: 
        - CloudWatchFullAccess
        - AmazonDynamoDBFullAccess
        - AmazonLexFullAccess
        - AWSLambdaBasicExecutionRole
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt fnBotServicesTable.StreamArn
            BatchSize: 1
            StartingPosition: LATEST
      Environment:
        Variables:
          SLOT_NAME:
            Ref: serviceSlot
          INTENT_NAME:
            Ref: speakToCouncilIntent
          BOT_NAME:
            Ref: fnBot

  CreateFNBotSingleServicesRecord:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: createSingleItem.createSingleItem
      Runtime: nodejs12.x
      CodeUri: ./src/addSingleSlot
      Description: ''
      MemorySize: 128
      Timeout: 3
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          TABLE_NAME:
            Ref: fnBotServicesTable
  
  serviceSlot:
    Type: Custom::LexSlotType
    Properties:
      ServiceToken:
        Fn::ImportValue: cfn-lex-slot-type-1-0-3-ServiceToken
      name: !Sub 
        - '${AWS::StackName}_service_type_${Workload}'
        - Workload: !Ref Workload
      description: a list of council services
      valueSelectionStrategy: TOP_RESOLUTION
      enumerationValues:
      - value: testing
        synonyms:
          - test

  speakToCouncilIntent:
    Type: Custom::LexIntent
    DependsOn: 
    - serviceSlot
    Properties:
      ServiceToken:
        Fn::ImportValue: cfn-lex-intent-1-0-3-ServiceToken
      name: !Sub
        - '${AWS::StackName}_speak_to_council_sam_${Workload}'
        - Workload: !Ref Workload
      confirmationPrompt:
        maxAttempts: 1
        messages:
          - content: "test"
            contentType: "PlainText"
      fulfillmentActivity: 
        type: "ReturnIntent"
      dialogCodeHook: 
        uri: !GetAtt speakToCouncilFunction.Arn
        messageVersion: 1.0
      sampleUtterances:
        - I want {service}
      slots:
        - name: service
          description: "what service do you want"
          priority: 1
          slotConstraint: Required
          slotType:
            Ref: serviceSlot
          slotTypeVersion: "$LATEST"
          valueElicitationPrompt:
            maxAttempts: 2
            messages:
            - content: What service do you want?
              contentType: PlainText
    
  fnBot:
    Type: Custom::LexBot
    DependsOn: 
      - speakToCouncilIntent
    Properties:
      ServiceToken:
        Fn::ImportValue: cfn-lex-bot-1-0-4-ServiceToken
      name: !Sub
        - '${AWS::StackName}fn_bot_sam_${Workload}'
        - Workload: !Ref Workload
      abortStatement:
        messages:
          - content: "I dont understand"
            contentType: "PlainText"
      childDirected: false
      clarificationPrompt:
        maxAttempts: 1
        messages:
          - content: "I'm sorry, I didn't hear that. Can you repeate what you just said?"
            contentType: "PlainText"
      description: 'BOT'
      voiceId: Joanna
      idleSessionTTLInSeconds: 300
      intents:
        - intentName:
            Ref: speakToCouncilIntent
          intentVersion: "$LATEST"
      locale: en-US
      processBehavior: "BUILD"

    # give permission to Lex bots to run the validation function
  fnBotPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt speakToCouncilFunction.Arn
      Principal: lex.amazonaws.com
  
  getUserFromCRMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getUserFromCRM
      Runtime: nodejs12.x
      MemorySize: 64
      Timeout: 100
      CodeUri: ./src/getUserFromCRM/
      Description: A Lambda function that checks for a users phone number in CRM systems and returns an object with details
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          NBC_API_KEY: !Ref NbcCrmApiKey
          NBC_API_ENDPOINT: !Ref NbcCrmApiEndpoint